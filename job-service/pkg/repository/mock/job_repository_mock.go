// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/interface.go
//
// Generated by this command:
//
//	mockgen -source pkg/repository/interface/interface.go -destination pkg/repository/mock/job_repository_mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	models "Auth/pkg/utils/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJobRepository is a mock of JobRepository interface.
type MockJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobRepositoryMockRecorder
}

// MockJobRepositoryMockRecorder is the mock recorder for MockJobRepository.
type MockJobRepositoryMockRecorder struct {
	mock *MockJobRepository
}

// NewMockJobRepository creates a new mock instance.
func NewMockJobRepository(ctrl *gomock.Controller) *MockJobRepository {
	mock := &MockJobRepository{ctrl: ctrl}
	mock.recorder = &MockJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobRepository) EXPECT() *MockJobRepositoryMockRecorder {
	return m.recorder
}

// ApplyJob mocks base method.
func (m *MockJobRepository) ApplyJob(application models.ApplyJob, resumeURL string) (models.ApplyJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyJob", application, resumeURL)
	ret0, _ := ret[0].(models.ApplyJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyJob indicates an expected call of ApplyJob.
func (mr *MockJobRepositoryMockRecorder) ApplyJob(application, resumeURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyJob", reflect.TypeOf((*MockJobRepository)(nil).ApplyJob), application, resumeURL)
}

// DeleteAJob mocks base method.
func (m *MockJobRepository) DeleteAJob(employerIDInt, jobID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAJob", employerIDInt, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAJob indicates an expected call of DeleteAJob.
func (mr *MockJobRepositoryMockRecorder) DeleteAJob(employerIDInt, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAJob", reflect.TypeOf((*MockJobRepository)(nil).DeleteAJob), employerIDInt, jobID)
}

// DeleteSavedJob mocks base method.
func (m *MockJobRepository) DeleteSavedJob(jobID, userID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSavedJob", jobID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSavedJob indicates an expected call of DeleteSavedJob.
func (mr *MockJobRepositoryMockRecorder) DeleteSavedJob(jobID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSavedJob", reflect.TypeOf((*MockJobRepository)(nil).DeleteSavedJob), jobID, userID)
}

// GetAJob mocks base method.
func (m *MockJobRepository) GetAJob(employerID, jobId int32) (models.JobOpeningResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAJob", employerID, jobId)
	ret0, _ := ret[0].(models.JobOpeningResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAJob indicates an expected call of GetAJob.
func (mr *MockJobRepositoryMockRecorder) GetAJob(employerID, jobId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAJob", reflect.TypeOf((*MockJobRepository)(nil).GetAJob), employerID, jobId)
}

// GetAllJobs mocks base method.
func (m *MockJobRepository) GetAllJobs(employerID int32) ([]models.AllJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs", employerID)
	ret0, _ := ret[0].([]models.AllJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockJobRepositoryMockRecorder) GetAllJobs(employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockJobRepository)(nil).GetAllJobs), employerID)
}

// GetApplicantsByEmployerID mocks base method.
func (m *MockJobRepository) GetApplicantsByEmployerID(employerID int64) ([]models.ApplyJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicantsByEmployerID", employerID)
	ret0, _ := ret[0].([]models.ApplyJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicantsByEmployerID indicates an expected call of GetApplicantsByEmployerID.
func (mr *MockJobRepositoryMockRecorder) GetApplicantsByEmployerID(employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicantsByEmployerID", reflect.TypeOf((*MockJobRepository)(nil).GetApplicantsByEmployerID), employerID)
}

// GetInterview mocks base method.
func (m *MockJobRepository) GetInterview(jobID, employerID int32) (models.InterviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterview", jobID, employerID)
	ret0, _ := ret[0].(models.InterviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterview indicates an expected call of GetInterview.
func (mr *MockJobRepositoryMockRecorder) GetInterview(jobID, employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterview", reflect.TypeOf((*MockJobRepository)(nil).GetInterview), jobID, employerID)
}

// GetJobDetails mocks base method.
func (m *MockJobRepository) GetJobDetails(jobID int32) (models.JobOpeningResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobDetails", jobID)
	ret0, _ := ret[0].(models.JobOpeningResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobDetails indicates an expected call of GetJobDetails.
func (mr *MockJobRepositoryMockRecorder) GetJobDetails(jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobDetails", reflect.TypeOf((*MockJobRepository)(nil).GetJobDetails), jobID)
}

// GetJobIDByEmployerID mocks base method.
func (m *MockJobRepository) GetJobIDByEmployerID(employerID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobIDByEmployerID", employerID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobIDByEmployerID indicates an expected call of GetJobIDByEmployerID.
func (mr *MockJobRepositoryMockRecorder) GetJobIDByEmployerID(employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobIDByEmployerID", reflect.TypeOf((*MockJobRepository)(nil).GetJobIDByEmployerID), employerID)
}

// GetSavedJobs mocks base method.
func (m *MockJobRepository) GetSavedJobs(userIdInt int32) ([]models.SavedJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavedJobs", userIdInt)
	ret0, _ := ret[0].([]models.SavedJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedJobs indicates an expected call of GetSavedJobs.
func (mr *MockJobRepositoryMockRecorder) GetSavedJobs(userIdInt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedJobs", reflect.TypeOf((*MockJobRepository)(nil).GetSavedJobs), userIdInt)
}

// IsJobExist mocks base method.
func (m *MockJobRepository) IsJobExist(jobID int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJobExist", jobID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsJobExist indicates an expected call of IsJobExist.
func (mr *MockJobRepositoryMockRecorder) IsJobExist(jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJobExist", reflect.TypeOf((*MockJobRepository)(nil).IsJobExist), jobID)
}

// IsJobSaved mocks base method.
func (m *MockJobRepository) IsJobSaved(jobID, userID int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJobSaved", jobID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsJobSaved indicates an expected call of IsJobSaved.
func (mr *MockJobRepositoryMockRecorder) IsJobSaved(jobID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJobSaved", reflect.TypeOf((*MockJobRepository)(nil).IsJobSaved), jobID, userID)
}

// JobSeekerGetAllJobs mocks base method.
func (m *MockJobRepository) JobSeekerGetAllJobs(keyword string) ([]models.JobOpeningResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobSeekerGetAllJobs", keyword)
	ret0, _ := ret[0].([]models.JobOpeningResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobSeekerGetAllJobs indicates an expected call of JobSeekerGetAllJobs.
func (mr *MockJobRepositoryMockRecorder) JobSeekerGetAllJobs(keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobSeekerGetAllJobs", reflect.TypeOf((*MockJobRepository)(nil).JobSeekerGetAllJobs), keyword)
}

// PostJob mocks base method.
func (m *MockJobRepository) PostJob(jobDetails models.JobOpening, employerID int32) (models.JobOpeningResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostJob", jobDetails, employerID)
	ret0, _ := ret[0].(models.JobOpeningResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostJob indicates an expected call of PostJob.
func (mr *MockJobRepositoryMockRecorder) PostJob(jobDetails, employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostJob", reflect.TypeOf((*MockJobRepository)(nil).PostJob), jobDetails, employerID)
}

// SaveJobs mocks base method.
func (m *MockJobRepository) SaveJobs(jobID, userID int64) (models.SavedJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveJobs", jobID, userID)
	ret0, _ := ret[0].(models.SavedJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveJobs indicates an expected call of SaveJobs.
func (mr *MockJobRepositoryMockRecorder) SaveJobs(jobID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveJobs", reflect.TypeOf((*MockJobRepository)(nil).SaveJobs), jobID, userID)
}

// ScheduleInterview mocks base method.
func (m *MockJobRepository) ScheduleInterview(interview models.Interview) (models.InterviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleInterview", interview)
	ret0, _ := ret[0].(models.InterviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleInterview indicates an expected call of ScheduleInterview.
func (mr *MockJobRepositoryMockRecorder) ScheduleInterview(interview any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleInterview", reflect.TypeOf((*MockJobRepository)(nil).ScheduleInterview), interview)
}

// UpdateAJob mocks base method.
func (m *MockJobRepository) UpdateAJob(employerID, jobID int32, jobDetails models.JobOpening) (models.JobOpeningResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAJob", employerID, jobID, jobDetails)
	ret0, _ := ret[0].(models.JobOpeningResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAJob indicates an expected call of UpdateAJob.
func (mr *MockJobRepositoryMockRecorder) UpdateAJob(employerID, jobID, jobDetails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAJob", reflect.TypeOf((*MockJobRepository)(nil).UpdateAJob), employerID, jobID, jobDetails)
}
