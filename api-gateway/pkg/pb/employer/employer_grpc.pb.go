// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: pkg/pb/employer/employer.proto

package employer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Employer_EmployerSignup_FullMethodName = "/employer.Employer/EmployerSignup"
	Employer_EmployerLogin_FullMethodName  = "/employer.Employer/EmployerLogin"
)

// EmployerClient is the client API for Employer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployerClient interface {
	EmployerSignup(ctx context.Context, in *EmployerSignupRequest, opts ...grpc.CallOption) (*EmployerSignupResponse, error)
	EmployerLogin(ctx context.Context, in *EmployerLoginInRequest, opts ...grpc.CallOption) (*EmployerLoginResponse, error)
}

type employerClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployerClient(cc grpc.ClientConnInterface) EmployerClient {
	return &employerClient{cc}
}

func (c *employerClient) EmployerSignup(ctx context.Context, in *EmployerSignupRequest, opts ...grpc.CallOption) (*EmployerSignupResponse, error) {
	out := new(EmployerSignupResponse)
	err := c.cc.Invoke(ctx, Employer_EmployerSignup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employerClient) EmployerLogin(ctx context.Context, in *EmployerLoginInRequest, opts ...grpc.CallOption) (*EmployerLoginResponse, error) {
	out := new(EmployerLoginResponse)
	err := c.cc.Invoke(ctx, Employer_EmployerLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployerServer is the server API for Employer service.
// All implementations must embed UnimplementedEmployerServer
// for forward compatibility
type EmployerServer interface {
	EmployerSignup(context.Context, *EmployerSignupRequest) (*EmployerSignupResponse, error)
	EmployerLogin(context.Context, *EmployerLoginInRequest) (*EmployerLoginResponse, error)
	mustEmbedUnimplementedEmployerServer()
}

// UnimplementedEmployerServer must be embedded to have forward compatible implementations.
type UnimplementedEmployerServer struct {
}

func (UnimplementedEmployerServer) EmployerSignup(context.Context, *EmployerSignupRequest) (*EmployerSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmployerSignup not implemented")
}
func (UnimplementedEmployerServer) EmployerLogin(context.Context, *EmployerLoginInRequest) (*EmployerLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmployerLogin not implemented")
}
func (UnimplementedEmployerServer) mustEmbedUnimplementedEmployerServer() {}

// UnsafeEmployerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployerServer will
// result in compilation errors.
type UnsafeEmployerServer interface {
	mustEmbedUnimplementedEmployerServer()
}

func RegisterEmployerServer(s grpc.ServiceRegistrar, srv EmployerServer) {
	s.RegisterService(&Employer_ServiceDesc, srv)
}

func _Employer_EmployerSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployerSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployerServer).EmployerSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Employer_EmployerSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployerServer).EmployerSignup(ctx, req.(*EmployerSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employer_EmployerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployerLoginInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployerServer).EmployerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Employer_EmployerLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployerServer).EmployerLogin(ctx, req.(*EmployerLoginInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Employer_ServiceDesc is the grpc.ServiceDesc for Employer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Employer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employer.Employer",
	HandlerType: (*EmployerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmployerSignup",
			Handler:    _Employer_EmployerSignup_Handler,
		},
		{
			MethodName: "EmployerLogin",
			Handler:    _Employer_EmployerLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/employer/employer.proto",
}
